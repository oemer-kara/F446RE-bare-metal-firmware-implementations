
UART_RXTX_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000029c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000460  08000468  00001468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000460  08000460  00001468  2**0
                  CONTENTS
  4 .ARM          00000000  08000460  08000460  00001468  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000460  08000468  00001468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000460  08000460  00001460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000464  08000464  00001464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000468  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000468  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007ba  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002a5  00000000  00000000  00001c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005e  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018acf  00000000  00000000  00001fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b9f  00000000  00000000  0001aab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aac1  00000000  00000000  0001b654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6115  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  000a6158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000a6294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000448 	.word	0x08000448

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000448 	.word	0x08000448

08000204 <main>:


char key; /**< Variable to store received key */

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
    // Enable clock access to GPIOA
    RCC->AHB1ENR |= GPIOA_EN;
 8000208:	4b10      	ldr	r3, [pc, #64]	@ (800024c <main+0x48>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a0f      	ldr	r2, [pc, #60]	@ (800024c <main+0x48>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
    // Set PA5 mode to output
    GPIOA->MODER |= (1U << 10);
 8000214:	4b0e      	ldr	r3, [pc, #56]	@ (8000250 <main+0x4c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0d      	ldr	r2, [pc, #52]	@ (8000250 <main+0x4c>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800021e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1U << 11);
 8000220:	4b0b      	ldr	r3, [pc, #44]	@ (8000250 <main+0x4c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0a      	ldr	r2, [pc, #40]	@ (8000250 <main+0x4c>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800022a:	6013      	str	r3, [r2, #0]

    // Initialize UART2 for transmission and reception
    uart2_txrx_init();
 800022c:	f000 f83a 	bl	80002a4 <uart2_txrx_init>

    while (1)
    {
        // Read a character from UART2
        key = uart2_read();
 8000230:	f000 f890 	bl	8000354 <uart2_read>
 8000234:	4603      	mov	r3, r0
 8000236:	461a      	mov	r2, r3
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <main+0x50>)
 800023a:	701a      	strb	r2, [r3, #0]
        // Write a character to terminal
        uart2_write(key);
 800023c:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <main+0x50>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f89b 	bl	800037c <uart2_write>
        key = uart2_read();
 8000246:	bf00      	nop
 8000248:	e7f2      	b.n	8000230 <main+0x2c>
 800024a:	bf00      	nop
 800024c:	40023800 	.word	0x40023800
 8000250:	40020000 	.word	0x40020000
 8000254:	2000001c 	.word	0x2000001c

08000258 <compute_uart_baud_rate>:
 * @param peripheral_clock The clock frequency of the UART peripheral.
 * @param baud_rate The desired baud rate.
 * @return uint16_t The computed baud rate setting.
 */
uint16_t compute_uart_baud_rate(uint32_t peripheral_clock, uint32_t baud_rate)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	6039      	str	r1, [r7, #0]
    return (peripheral_clock + (baud_rate / 2U)) / baud_rate;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	085a      	lsrs	r2, r3, #1
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	441a      	add	r2, r3
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	b29b      	uxth	r3, r3
}
 8000272:	4618      	mov	r0, r3
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr

0800027e <uart_set_baud_rate>:
 * @param usart_tx The UART peripheral to configure.
 * @param peripheral_clock The clock frequency of the UART peripheral.
 * @param baud_rate The desired baud rate.
 */
void uart_set_baud_rate(USART_TypeDef* usart_tx, uint32_t peripheral_clock, uint32_t baud_rate)
{
 800027e:	b580      	push	{r7, lr}
 8000280:	b084      	sub	sp, #16
 8000282:	af00      	add	r7, sp, #0
 8000284:	60f8      	str	r0, [r7, #12]
 8000286:	60b9      	str	r1, [r7, #8]
 8000288:	607a      	str	r2, [r7, #4]
    usart_tx->BRR = compute_uart_baud_rate(peripheral_clock, baud_rate);
 800028a:	6879      	ldr	r1, [r7, #4]
 800028c:	68b8      	ldr	r0, [r7, #8]
 800028e:	f7ff ffe3 	bl	8000258 <compute_uart_baud_rate>
 8000292:	4603      	mov	r3, r0
 8000294:	461a      	mov	r2, r3
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	609a      	str	r2, [r3, #8]
}
 800029a:	bf00      	nop
 800029c:	3710      	adds	r7, #16
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <uart2_txrx_init>:
 * - Configures the UART baud rate.
 * - Sets the transfer direction to transmit and receive.
 * - Enables the UART module.
 */
void uart2_txrx_init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
    // Enable Clock access to GPIOA
    RCC->AHB1ENR |= GPIOA_EN;
 80002a8:	4b26      	ldr	r3, [pc, #152]	@ (8000344 <uart2_txrx_init+0xa0>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ac:	4a25      	ldr	r2, [pc, #148]	@ (8000344 <uart2_txrx_init+0xa0>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 Mode to Alternate Function Mode
    GPIOA->MODER &= ~(3U << 4);     // Clear bits 4 and 5
 80002b4:	4b24      	ldr	r3, [pc, #144]	@ (8000348 <uart2_txrx_init+0xa4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a23      	ldr	r2, [pc, #140]	@ (8000348 <uart2_txrx_init+0xa4>)
 80002ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80002be:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2U << 4);      // Set bits 4 and 5 to 10 (Alternate Function)
 80002c0:	4b21      	ldr	r3, [pc, #132]	@ (8000348 <uart2_txrx_init+0xa4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a20      	ldr	r2, [pc, #128]	@ (8000348 <uart2_txrx_init+0xa4>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6013      	str	r3, [r2, #0]

    // Set PA2 Alternate Function type to UART_TX (AF07)
    GPIOA->AFR[0] &= ~(0xF << 8);     // Clear bits 8-11
 80002cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000348 <uart2_txrx_init+0xa4>)
 80002ce:	6a1b      	ldr	r3, [r3, #32]
 80002d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000348 <uart2_txrx_init+0xa4>)
 80002d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80002d6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 8);       // Set bits 8-11 to 0111 (AF7 for USART2)
 80002d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000348 <uart2_txrx_init+0xa4>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000348 <uart2_txrx_init+0xa4>)
 80002de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80002e2:	6213      	str	r3, [r2, #32]

    GPIOA->MODER &= ~(3U << 6); // Clear bits 6-7
 80002e4:	4b18      	ldr	r3, [pc, #96]	@ (8000348 <uart2_txrx_init+0xa4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a17      	ldr	r2, [pc, #92]	@ (8000348 <uart2_txrx_init+0xa4>)
 80002ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002ee:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2U << 6);  // Set bits 6-7 to 10 (Alternate Function)
 80002f0:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <uart2_txrx_init+0xa4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a14      	ldr	r2, [pc, #80]	@ (8000348 <uart2_txrx_init+0xa4>)
 80002f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002fa:	6013      	str	r3, [r2, #0]

    // Set PA3 Alternate Function type to UART_RX (AF07)
    GPIOA->AFR[0] &= ~(0xF << 12);
 80002fc:	4b12      	ldr	r3, [pc, #72]	@ (8000348 <uart2_txrx_init+0xa4>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a11      	ldr	r2, [pc, #68]	@ (8000348 <uart2_txrx_init+0xa4>)
 8000302:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000306:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 12);
 8000308:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <uart2_txrx_init+0xa4>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a0e      	ldr	r2, [pc, #56]	@ (8000348 <uart2_txrx_init+0xa4>)
 800030e:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000312:	6213      	str	r3, [r2, #32]

    // Enable clock access to UART2
    RCC->APB1ENR |= USART2_EN;
 8000314:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <uart2_txrx_init+0xa0>)
 8000316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000318:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <uart2_txrx_init+0xa0>)
 800031a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800031e:	6413      	str	r3, [r2, #64]	@ 0x40

    // Configure UART Baudrate
    uart_set_baud_rate(USART2, APB1_CLK, UART_BAUDRATE);
 8000320:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000324:	4909      	ldr	r1, [pc, #36]	@ (800034c <uart2_txrx_init+0xa8>)
 8000326:	480a      	ldr	r0, [pc, #40]	@ (8000350 <uart2_txrx_init+0xac>)
 8000328:	f7ff ffa9 	bl	800027e <uart_set_baud_rate>

    // Configure transfer direction
    USART2->CR1 = (CR1_TE | CR1_RE);
 800032c:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <uart2_txrx_init+0xac>)
 800032e:	220c      	movs	r2, #12
 8000330:	60da      	str	r2, [r3, #12]

    // Enable the UART module
    USART2->CR1 |= CR1_UE;
 8000332:	4b07      	ldr	r3, [pc, #28]	@ (8000350 <uart2_txrx_init+0xac>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	4a06      	ldr	r2, [pc, #24]	@ (8000350 <uart2_txrx_init+0xac>)
 8000338:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800033c:	60d3      	str	r3, [r2, #12]
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40023800 	.word	0x40023800
 8000348:	40020000 	.word	0x40020000
 800034c:	00f42400 	.word	0x00f42400
 8000350:	40004400 	.word	0x40004400

08000354 <uart2_read>:
 * then reads and returns the character from the UART2 data register.
 *
 * @return char The received character.
 */
char uart2_read(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
    // Make sure the receive data register is not empty
    while(!(USART2->SR & SR_RXNE)) {}
 8000358:	bf00      	nop
 800035a:	4b07      	ldr	r3, [pc, #28]	@ (8000378 <uart2_read+0x24>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f003 0320 	and.w	r3, r3, #32
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0f9      	beq.n	800035a <uart2_read+0x6>
    return USART2->DR;
 8000366:	4b04      	ldr	r3, [pc, #16]	@ (8000378 <uart2_read+0x24>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	b2db      	uxtb	r3, r3
}
 800036c:	4618      	mov	r0, r3
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40004400 	.word	0x40004400

0800037c <uart2_write>:
 * then writes the character to the UART2 data register.
 *
 * @param ch The character to be transmitted.
 */
void uart2_write(int ch)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
    // Make sure the transmit data register is empty
    while(!(USART2->SR & SR_TXE)) {}
 8000384:	bf00      	nop
 8000386:	4b08      	ldr	r3, [pc, #32]	@ (80003a8 <uart2_write+0x2c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0f9      	beq.n	8000386 <uart2_write+0xa>
    // Write to transmit data register
    USART2->DR = (ch & 0xFF);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a04      	ldr	r2, [pc, #16]	@ (80003a8 <uart2_write+0x2c>)
 8000396:	b2db      	uxtb	r3, r3
 8000398:	6053      	str	r3, [r2, #4]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40004400 	.word	0x40004400

080003ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ac:	480d      	ldr	r0, [pc, #52]	@ (80003e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b4:	480c      	ldr	r0, [pc, #48]	@ (80003e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b6:	490d      	ldr	r1, [pc, #52]	@ (80003ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b8:	4a0d      	ldr	r2, [pc, #52]	@ (80003f0 <LoopForever+0xe>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0a      	ldr	r2, [pc, #40]	@ (80003f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003cc:	4c0a      	ldr	r4, [pc, #40]	@ (80003f8 <LoopForever+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003da:	f000 f811 	bl	8000400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003de:	f7ff ff11 	bl	8000204 <main>

080003e2 <LoopForever>:

LoopForever:
  b LoopForever
 80003e2:	e7fe      	b.n	80003e2 <LoopForever>
  ldr   r0, =_estack
 80003e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f0:	08000468 	.word	0x08000468
  ldr r2, =_sbss
 80003f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f8:	20000020 	.word	0x20000020

080003fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC_IRQHandler>
	...

08000400 <__libc_init_array>:
 8000400:	b570      	push	{r4, r5, r6, lr}
 8000402:	4d0d      	ldr	r5, [pc, #52]	@ (8000438 <__libc_init_array+0x38>)
 8000404:	4c0d      	ldr	r4, [pc, #52]	@ (800043c <__libc_init_array+0x3c>)
 8000406:	1b64      	subs	r4, r4, r5
 8000408:	10a4      	asrs	r4, r4, #2
 800040a:	2600      	movs	r6, #0
 800040c:	42a6      	cmp	r6, r4
 800040e:	d109      	bne.n	8000424 <__libc_init_array+0x24>
 8000410:	4d0b      	ldr	r5, [pc, #44]	@ (8000440 <__libc_init_array+0x40>)
 8000412:	4c0c      	ldr	r4, [pc, #48]	@ (8000444 <__libc_init_array+0x44>)
 8000414:	f000 f818 	bl	8000448 <_init>
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	10a4      	asrs	r4, r4, #2
 800041c:	2600      	movs	r6, #0
 800041e:	42a6      	cmp	r6, r4
 8000420:	d105      	bne.n	800042e <__libc_init_array+0x2e>
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f855 3b04 	ldr.w	r3, [r5], #4
 8000428:	4798      	blx	r3
 800042a:	3601      	adds	r6, #1
 800042c:	e7ee      	b.n	800040c <__libc_init_array+0xc>
 800042e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000432:	4798      	blx	r3
 8000434:	3601      	adds	r6, #1
 8000436:	e7f2      	b.n	800041e <__libc_init_array+0x1e>
 8000438:	08000460 	.word	0x08000460
 800043c:	08000460 	.word	0x08000460
 8000440:	08000460 	.word	0x08000460
 8000444:	08000464 	.word	0x08000464

08000448 <_init>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr

08000454 <_fini>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr
