
UART_RXTX_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000280  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000444  0800044c  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000444  08000444  0000144c  2**0
                  CONTENTS
  4 .ARM          00000000  08000444  08000444  0000144c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000444  0800044c  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000444  08000444  00001444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000448  08000448  00001448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800044c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800044c  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007af  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000285  00000000  00000000  00001c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005e  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199df  00000000  00000000  00001f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e9c  00000000  00000000  0001b97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eef2  00000000  00000000  0001c819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab70b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  000ab750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000ab88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800042c 	.word	0x0800042c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	0800042c 	.word	0x0800042c

08000204 <main>:
#define LED_PIN GPIOA_5

char key;

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |=  GPIOA_EN;
 8000208:	4b15      	ldr	r3, [pc, #84]	@ (8000260 <main+0x5c>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a14      	ldr	r2, [pc, #80]	@ (8000260 <main+0x5c>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |=  (1U << 10);
 8000214:	4b13      	ldr	r3, [pc, #76]	@ (8000264 <main+0x60>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a12      	ldr	r2, [pc, #72]	@ (8000264 <main+0x60>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 8000220:	4b10      	ldr	r3, [pc, #64]	@ (8000264 <main+0x60>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0f      	ldr	r2, [pc, #60]	@ (8000264 <main+0x60>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800022a:	6013      	str	r3, [r2, #0]

	uart2_txrx_init( );
 800022c:	f000 f844 	bl	80002b8 <uart2_txrx_init>

    while(1)
    {
        key = uart2_read();
 8000230:	f000 f89a 	bl	8000368 <uart2_read>
 8000234:	4603      	mov	r3, r0
 8000236:	461a      	mov	r2, r3
 8000238:	4b0b      	ldr	r3, [pc, #44]	@ (8000268 <main+0x64>)
 800023a:	701a      	strb	r2, [r3, #0]
        if(key == '1'){
 800023c:	4b0a      	ldr	r3, [pc, #40]	@ (8000268 <main+0x64>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b31      	cmp	r3, #49	@ 0x31
 8000242:	d106      	bne.n	8000252 <main+0x4e>
        	GPIOA->ODR |= LED_PIN;
 8000244:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <main+0x60>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	4a06      	ldr	r2, [pc, #24]	@ (8000264 <main+0x60>)
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	6153      	str	r3, [r2, #20]
 8000250:	e7ee      	b.n	8000230 <main+0x2c>
        }else{
        	GPIOA->ODR &= ~LED_PIN;
 8000252:	4b04      	ldr	r3, [pc, #16]	@ (8000264 <main+0x60>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a03      	ldr	r2, [pc, #12]	@ (8000264 <main+0x60>)
 8000258:	f023 0320 	bic.w	r3, r3, #32
 800025c:	6153      	str	r3, [r2, #20]
        key = uart2_read();
 800025e:	e7e7      	b.n	8000230 <main+0x2c>
 8000260:	40023800 	.word	0x40023800
 8000264:	40020000 	.word	0x40020000
 8000268:	2000001c 	.word	0x2000001c

0800026c <compute_uart_baud_rate>:
    uart2_write(ch);
    return ch;
}

uint16_t compute_uart_baud_rate(uint32_t peripheral_clock, uint32_t baud_rate)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
    return (peripheral_clock + (baud_rate / 2U)) / baud_rate;
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	085a      	lsrs	r2, r3, #1
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	441a      	add	r2, r3
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	fbb2 f3f3 	udiv	r3, r2, r3
 8000284:	b29b      	uxth	r3, r3
}
 8000286:	4618      	mov	r0, r3
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <uart_set_baud_rate>:

void uart_set_baud_rate(USART_TypeDef* usart_tx, uint32_t peripheral_clock, uint32_t baud_rate)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b084      	sub	sp, #16
 8000296:	af00      	add	r7, sp, #0
 8000298:	60f8      	str	r0, [r7, #12]
 800029a:	60b9      	str	r1, [r7, #8]
 800029c:	607a      	str	r2, [r7, #4]
    usart_tx->BRR = compute_uart_baud_rate(peripheral_clock, baud_rate);
 800029e:	6879      	ldr	r1, [r7, #4]
 80002a0:	68b8      	ldr	r0, [r7, #8]
 80002a2:	f7ff ffe3 	bl	800026c <compute_uart_baud_rate>
 80002a6:	4603      	mov	r3, r0
 80002a8:	461a      	mov	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	609a      	str	r2, [r3, #8]
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <uart2_txrx_init>:

void uart2_txrx_init( )
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
    // Enable Clock access to GPIOA
    RCC->AHB1ENR |= GPIOA_EN;
 80002bc:	4b26      	ldr	r3, [pc, #152]	@ (8000358 <uart2_txrx_init+0xa0>)
 80002be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c0:	4a25      	ldr	r2, [pc, #148]	@ (8000358 <uart2_txrx_init+0xa0>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 Mode to Alternate Function Mode
    GPIOA->MODER &= ~(3U << 4);     // Clear bits 4 and 5
 80002c8:	4b24      	ldr	r3, [pc, #144]	@ (800035c <uart2_txrx_init+0xa4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a23      	ldr	r2, [pc, #140]	@ (800035c <uart2_txrx_init+0xa4>)
 80002ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80002d2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2U << 4);      // Set bits 4 and 5 to 10 (Alternate Function)
 80002d4:	4b21      	ldr	r3, [pc, #132]	@ (800035c <uart2_txrx_init+0xa4>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a20      	ldr	r2, [pc, #128]	@ (800035c <uart2_txrx_init+0xa4>)
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6013      	str	r3, [r2, #0]

    // Set PA2 Alternate Function type to UART_TX (AF07)
    GPIOA->AFR[0] &= ~(0xF << 8);     // Clear bits 8-11
 80002e0:	4b1e      	ldr	r3, [pc, #120]	@ (800035c <uart2_txrx_init+0xa4>)
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	4a1d      	ldr	r2, [pc, #116]	@ (800035c <uart2_txrx_init+0xa4>)
 80002e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80002ea:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 8);       // Set bits 8-11 to 0111 (AF7 for USART2)
 80002ec:	4b1b      	ldr	r3, [pc, #108]	@ (800035c <uart2_txrx_init+0xa4>)
 80002ee:	6a1b      	ldr	r3, [r3, #32]
 80002f0:	4a1a      	ldr	r2, [pc, #104]	@ (800035c <uart2_txrx_init+0xa4>)
 80002f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80002f6:	6213      	str	r3, [r2, #32]

    GPIOA->MODER &= ~(3U << 6); // Clear bits 6-7
 80002f8:	4b18      	ldr	r3, [pc, #96]	@ (800035c <uart2_txrx_init+0xa4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a17      	ldr	r2, [pc, #92]	@ (800035c <uart2_txrx_init+0xa4>)
 80002fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000302:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2U << 6); // Set bits 7-7 to 0010 (Alternate Function)
 8000304:	4b15      	ldr	r3, [pc, #84]	@ (800035c <uart2_txrx_init+0xa4>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a14      	ldr	r2, [pc, #80]	@ (800035c <uart2_txrx_init+0xa4>)
 800030a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800030e:	6013      	str	r3, [r2, #0]


    //Set PA3 Alternate Function type to UART_RX (AF07)
    GPIOA->AFR[0] &= ~(0xF << 12);
 8000310:	4b12      	ldr	r3, [pc, #72]	@ (800035c <uart2_txrx_init+0xa4>)
 8000312:	6a1b      	ldr	r3, [r3, #32]
 8000314:	4a11      	ldr	r2, [pc, #68]	@ (800035c <uart2_txrx_init+0xa4>)
 8000316:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800031a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7U << 12);
 800031c:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <uart2_txrx_init+0xa4>)
 800031e:	6a1b      	ldr	r3, [r3, #32]
 8000320:	4a0e      	ldr	r2, [pc, #56]	@ (800035c <uart2_txrx_init+0xa4>)
 8000322:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000326:	6213      	str	r3, [r2, #32]


    // Enable clock access to UART2
    RCC->APB1ENR |= USART2_EN;
 8000328:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <uart2_txrx_init+0xa0>)
 800032a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800032c:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <uart2_txrx_init+0xa0>)
 800032e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000332:	6413      	str	r3, [r2, #64]	@ 0x40

    // Configure UART Baudrate
    uart_set_baud_rate(USART2, APB1_CLK, UART_BAUDRATE);
 8000334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000338:	4909      	ldr	r1, [pc, #36]	@ (8000360 <uart2_txrx_init+0xa8>)
 800033a:	480a      	ldr	r0, [pc, #40]	@ (8000364 <uart2_txrx_init+0xac>)
 800033c:	f7ff ffa9 	bl	8000292 <uart_set_baud_rate>

    // Configure transfer direction
    USART2->CR1 = (CR1_TE | CR1_RE);
 8000340:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <uart2_txrx_init+0xac>)
 8000342:	220c      	movs	r2, #12
 8000344:	60da      	str	r2, [r3, #12]

    // Enable the UART module
    USART2->CR1 |= CR1_UE;
 8000346:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <uart2_txrx_init+0xac>)
 8000348:	68db      	ldr	r3, [r3, #12]
 800034a:	4a06      	ldr	r2, [pc, #24]	@ (8000364 <uart2_txrx_init+0xac>)
 800034c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000350:	60d3      	str	r3, [r2, #12]
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800
 800035c:	40020000 	.word	0x40020000
 8000360:	00f42400 	.word	0x00f42400
 8000364:	40004400 	.word	0x40004400

08000368 <uart2_read>:

char uart2_read(){
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	// Make sure the recieve data register is empty.
	while(!(USART2->SR & SR_RXNE)){}
 800036c:	bf00      	nop
 800036e:	4b07      	ldr	r3, [pc, #28]	@ (800038c <uart2_read+0x24>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f003 0320 	and.w	r3, r3, #32
 8000376:	2b00      	cmp	r3, #0
 8000378:	d0f9      	beq.n	800036e <uart2_read+0x6>
	return USART2->DR;
 800037a:	4b04      	ldr	r3, [pc, #16]	@ (800038c <uart2_read+0x24>)
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	b2db      	uxtb	r3, r3

}
 8000380:	4618      	mov	r0, r3
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40004400 	.word	0x40004400

08000390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000390:	480d      	ldr	r0, [pc, #52]	@ (80003c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000392:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopForever+0x6>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopForever+0xe>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopForever+0x16>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003be:	f000 f811 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff ff1f 	bl	8000204 <main>

080003c6 <LoopForever>:

LoopForever:
  b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   r0, =_estack
 80003c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d4:	0800044c 	.word	0x0800044c
  ldr r2, =_sbss
 80003d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003dc:	20000020 	.word	0x20000020

080003e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>
	...

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	4d0d      	ldr	r5, [pc, #52]	@ (800041c <__libc_init_array+0x38>)
 80003e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000420 <__libc_init_array+0x3c>)
 80003ea:	1b64      	subs	r4, r4, r5
 80003ec:	10a4      	asrs	r4, r4, #2
 80003ee:	2600      	movs	r6, #0
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000424 <__libc_init_array+0x40>)
 80003f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000428 <__libc_init_array+0x44>)
 80003f8:	f000 f818 	bl	800042c <_init>
 80003fc:	1b64      	subs	r4, r4, r5
 80003fe:	10a4      	asrs	r4, r4, #2
 8000400:	2600      	movs	r6, #0
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f855 3b04 	ldr.w	r3, [r5], #4
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000444 	.word	0x08000444
 8000420:	08000444 	.word	0x08000444
 8000424:	08000444 	.word	0x08000444
 8000428:	08000448 	.word	0x08000448

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr
