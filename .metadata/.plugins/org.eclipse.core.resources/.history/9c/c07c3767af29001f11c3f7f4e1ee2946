
#include <stdio.h>

#define __IO volatile

#define PERIPH_BASE           0x40000000UL

#define USART2_BASE           (APB1PERIPH_BASE + 0x4400UL)
#define USART2                ((USART_TypeDef *) USART2_BASE)

#define APB1PERIPH_BASE       PERIPH_BASE
#define AHB1PERIPH_BASE       (PERIPH_BASE + 0x00020000UL)

#define GPIOA_BASE            (AHB1PERIPH_BASE + 0x0000UL)
#define GPIOA               ((GPIO_TypeDef *) GPIOA_BASE)

#define GPIOA_EN      (1U << 0)
#define USART2_EN     (1U << 17)

#define SYS_FREQ      16000000
#define APB1_CLK      SYS_FREQ     // Assuming no prescalers are used
#define UART_BAUDRATE 115200

#define CR1_TE        (1U << 3)
#define CR1_UE        (1U << 13)
#define CR1_RE        (1U << 2)

#define SR_TXE        (1U << 7)
#define SR_RXNE			(1U << 5)

typedef struct
{
  __IO uint32_t MODER;
  __IO uint32_t OTYPER;
  __IO uint32_t OSPEEDR;
  __IO uint32_t PUPDR;
  __IO uint32_t IDR;
  __IO uint32_t ODR;
  __IO uint32_t BSRR;
  __IO uint32_t LCKR;
  __IO uint32_t AFR[2];
} GPIO_TypeDef;


typedef struct
{
  __IO uint32_t SR;
  __IO uint32_t DR;
  __IO uint32_t BRR;
  __IO uint32_t CR1;
  __IO uint32_t CR2;
  __IO uint32_t CR3;
  __IO uint32_t GTPR;
} USART_TypeDef;

typedef struct
{
  __IO uint32_t CR;
  __IO uint32_t PLLCFGR;
  __IO uint32_t CFGR;
  __IO uint32_t CIR;
  __IO uint32_t AHB1RSTR;
  __IO uint32_t AHB2RSTR;
  __IO uint32_t AHB3RSTR;
  uint32_t      RESERVED0;
  __IO uint32_t APB1RSTR;
  __IO uint32_t APB2RSTR;
  uint32_t      RESERVED1[2];
  __IO uint32_t AHB1ENR;
  __IO uint32_t AHB2ENR;
  __IO uint32_t AHB3ENR;
  uint32_t      RESERVED2;
  __IO uint32_t APB1ENR;
  __IO uint32_t APB2ENR;
  uint32_t      RESERVED3[2];
  __IO uint32_t AHB1LPENR;
  __IO uint32_t AHB2LPENR;
  __IO uint32_t AHB3LPENR;
  uint32_t      RESERVED4;
  __IO uint32_t APB1LPENR;
  __IO uint32_t APB2LPENR;
  uint32_t      RESERVED5[2];
  __IO uint32_t BDCR;
  __IO uint32_t CSR;
  uint32_t      RESERVED6[2];
  __IO uint32_t SSCGR;
  __IO uint32_t PLLI2SCFGR;
  __IO uint32_t PLLSAICFGR;
  __IO uint32_t DCKCFGR;
  __IO uint32_t CKGATENR;
  __IO uint32_t DCKCFGR2;
} RCC_TypeDef;


char uart2_read();
int __io_putchar(int ch); //redirecting printf
uint16_t compute_uart_baud_rate(uint32_t peripheral_clock, uint32_t baud_rate);
void uart_set_baud_rate(USART_TypeDef* usart_tx, uint32_t peripheral_clock, uint32_t baud_rate);
void uart2_txrx_init( );
void uart2_write(int ch);

#define GPIOA_5 (1U<<5)
#define LED_PIN GPIOA_5

char key;

int main(void)
{

	RCC->AHB1ENR |=  GPIOA_EN;
	GPIOA->MODER |=  (1U << 10);
	GPIOA->MODER &= ~(1U<<11);

	uart2_txrx_init( );

    while(1)
    {
        key = uart2_read();
        if(key == '1'){
        	GPIOA->ODR |= LED_PIN;
        }else{
        	GPIOA->ODR &= ~LED_PIN;
        }
    }
}


int __io_putchar(int ch)
{
    uart2_write(ch);
    return ch;
}

uint16_t compute_uart_baud_rate(uint32_t peripheral_clock, uint32_t baud_rate)
{
    return (peripheral_clock + (baud_rate / 2U)) / baud_rate;
}

void uart_set_baud_rate(USART_TypeDef* usart_tx, uint32_t peripheral_clock, uint32_t baud_rate)
{
    usart_tx->BRR = compute_uart_baud_rate(peripheral_clock, baud_rate);
}

void uart2_txrx_init( )
{
    // Enable Clock access to GPIOA
    RCC->AHB1ENR |= GPIOA_EN;

    // Set PA2 Mode to Alternate Function Mode
    GPIOA->MODER &= ~(3U << 4);     // Clear bits 4 and 5
    GPIOA->MODER |= (2U << 4);      // Set bits 4 and 5 to 10 (Alternate Function)

    // Set PA2 Alternate Function type to UART_TX (AF07)
    GPIOA->AFR[0] &= ~(0xF << 8);     // Clear bits 8-11
    GPIOA->AFR[0] |= (7U << 8);       // Set bits 8-11 to 0111 (AF7 for USART2)

    GPIOA->MODER &= ~(3U << 6); // Clear bits 6-7
    GPIOA->MODER |= (2U << 6); // Set bits 7-7 to 0010 (Alternate Function)


    //Set PA3 Alternate Function type to UART_RX (AF07)
    GPIOA->AFR[0] &= ~(0xF << 12);
    GPIOA->AFR[0] |= (7U << 12);


    // Enable clock access to UART2
    RCC->APB1ENR |= USART2_EN;

    // Configure UART Baudrate
    uart_set_baud_rate(USART2, APB1_CLK, UART_BAUDRATE);

    // Configure transfer direction
    USART2->CR1 = (CR1_TE | CR1_RE);

    // Enable the UART module
    USART2->CR1 |= CR1_UE;
}

char uart2_read(){
	// Make sure the recieve data register is empty.
	while(!USART2->SR & SR_RXNE){}
	return USART2->DR;

}

void uart2_write(int ch)
{
    // Make sure transmit data register is empty
    while(!(USART2->SR & SR_TXE)) {}
    // Write to transmit data register
    USART2->DR = (ch & 0xFF);
}
