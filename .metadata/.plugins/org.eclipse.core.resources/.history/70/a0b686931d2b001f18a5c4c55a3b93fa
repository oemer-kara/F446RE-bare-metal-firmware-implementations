/*
 * uart.c
 *
 *  Created on: Jun 13, 2024
 *      Author: oemerkara
 */


//This file contains uart.h implementations
#include "uart.h"

uint16_t compute_uart_baud_rate(uint32_t peripheral_clock, uint32_t baud_rate)
{
    return (peripheral_clock + (baud_rate / 2U)) / baud_rate;
}

void uart_set_baud_rate(USART_TypeDef* usart_tx, uint32_t peripheral_clock, uint32_t baud_rate)
{
    usart_tx->BRR = compute_uart_baud_rate(peripheral_clock, baud_rate);
}


void uart2_txrx_init(void)
{
    // Enable Clock access to GPIOA
    RCC->AHB1ENR |= GPIOA_EN;

    // Set PA2 Mode to Alternate Function Mode
    GPIOA->MODER &= ~(3U << 4);     // Clear bits 4 and 5
    GPIOA->MODER |= (2U << 4);      // Set bits 4 and 5 to 10 (Alternate Function)

    // Set PA2 Alternate Function type to UART_TX (AF07)
    GPIOA->AFR[0] &= ~(0xF << 8);     // Clear bits 8-11
    GPIOA->AFR[0] |= (7U << 8);       // Set bits 8-11 to 0111 (AF7 for USART2)

    GPIOA->MODER &= ~(3U << 6); // Clear bits 6-7
    GPIOA->MODER |= (2U << 6);  // Set bits 6-7 to 10 (Alternate Function)

    // Set PA3 Alternate Function type to UART_RX (AF07)
    GPIOA->AFR[0] &= ~(0xF << 12);
    GPIOA->AFR[0] |= (7U << 12);

    // Enable clock access to UART2
    RCC->APB1ENR |= USART2_EN;

    // Configure UART Baudrate
    uart_set_baud_rate(USART2, APB1_CLK, UART_BAUDRATE);

    // Configure transfer direction
    USART2->CR1 = (CR1_TE | CR1_RE);

    // Enable the UART module
    USART2->CR1 |= CR1_UE;
}

char uart2_read(void)
{
    // Make sure the receive data register is not empty
    while(!(USART2->SR & SR_RXNE)) {}
    return USART2->DR;
}


void uart2_write(int ch)
{
    // Make sure the transmit data register is empty
    while(!(USART2->SR & SR_TXE)) {}
    // Write to transmit data register
    USART2->DR = (ch & 0xFF);
}
